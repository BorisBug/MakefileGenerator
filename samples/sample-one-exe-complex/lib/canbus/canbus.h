/**
 * @file canbus.h
 * @author Autogenerated via python scipt.. bip bip..
 * Python script by Boris Sn√§ll / borissnaell@gmail.com
 * Json script originator: data.json [2021-12-26 20:43:16]
 * @date 2021-12-28
 */

#ifndef _CANBUS_H_
#define _CANBUS_H_

#include <stdint.h>
#include <stdbool.h>

// states
#define OFF 0
#define ON 1

// status
#define ERROR 0
#define WARNING 1
#define OKAY 2


/**
 * @brief (set) The ambient temperature 
 * @param value range [10.0, 50.0]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_temperature(float value);

/**
 * @brief (get) The ambient temperature 
 * @return range [10.0, 50.0]
 */
float canbus_get_temperature(void);

/**
 * @brief (set) The ambient humidity percentage 
 * @param value range [0, 100]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_humidity(uint8_t value);

/**
 * @brief (get) The ambient humidity percentage 
 * @return range [0, 100]
 */
uint8_t canbus_get_humidity(void);

/**
 * @brief (set) The dht sensor status 
 * @param value status: 0=ERROR, 1=WARNING, 2=OKAY
 * @return bool: true on success, false on error (value not defined in status)
 */
bool canbus_set_dht_sensor_status(uint8_t value);

/**
 * @brief (get) The dht sensor status 
 * @return status: 0=ERROR, 1=WARNING, 2=OKAY
 */
uint8_t canbus_get_dht_sensor_status(void);

/**
 * @brief (set) The flow rate in milliliter per second 
 * @param value range [17, 500]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_flow_rate(uint16_t value);

/**
 * @brief (get) The flow rate in milliliter per second 
 * @return range [17, 500]
 */
uint16_t canbus_get_flow_rate(void);

/**
 * @brief (set) The flow meter sensor status 
 * @param value status: 0=ERROR, 1=WARNING, 2=OKAY
 * @return bool: true on success, false on error (value not defined in status)
 */
bool canbus_set_flow_meter_sensor_status(uint8_t value);

/**
 * @brief (get) The flow meter sensor status 
 * @return status: 0=ERROR, 1=WARNING, 2=OKAY
 */
uint8_t canbus_get_flow_meter_sensor_status(void);

/**
 * @brief (set) The light intensity percentage 
 * @param value range [0, 100]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_light_intensity(uint8_t value);

/**
 * @brief (get) The light intensity percentage 
 * @return range [0, 100]
 */
uint8_t canbus_get_light_intensity(void);

/**
 * @brief (set) The light intensity sensor status 
 * @param value status: 0=ERROR, 1=WARNING, 2=OKAY
 * @return bool: true on success, false on error (value not defined in status)
 */
bool canbus_set_light_intensity_sensor_status(uint8_t value);

/**
 * @brief (get) The light intensity sensor status 
 * @return status: 0=ERROR, 1=WARNING, 2=OKAY
 */
uint8_t canbus_get_light_intensity_sensor_status(void);

/**
 * @brief (set) The water level percentage 
 * @param value range [0, 100]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_water_level(uint8_t value);

/**
 * @brief (get) The water level percentage 
 * @return range [0, 100]
 */
uint8_t canbus_get_water_level(void);

/**
 * @brief (set) The water level sensor status 
 * @param value status: 0=ERROR, 1=WARNING, 2=OKAY
 * @return bool: true on success, false on error (value not defined in status)
 */
bool canbus_set_water_level_sensor_status(uint8_t value);

/**
 * @brief (get) The water level sensor status 
 * @return status: 0=ERROR, 1=WARNING, 2=OKAY
 */
uint8_t canbus_get_water_level_sensor_status(void);

/**
 * @brief (set) The soil moisture percentage 
 * @param value range [0, 100]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_soil_moisture(uint8_t value);

/**
 * @brief (get) The soil moisture percentage 
 * @return range [0, 100]
 */
uint8_t canbus_get_soil_moisture(void);

/**
 * @brief (set) The soil moisture sensor status 
 * @param value status: 0=ERROR, 1=WARNING, 2=OKAY
 * @return bool: true on success, false on error (value not defined in status)
 */
bool canbus_set_soil_moisture_sensor_status(uint8_t value);

/**
 * @brief (get) The soil moisture sensor status 
 * @return status: 0=ERROR, 1=WARNING, 2=OKAY
 */
uint8_t canbus_get_soil_moisture_sensor_status(void);

/**
 * @brief (set) The current RTC year 
 * @param value range [2021, 2040]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_rtc_year(uint16_t value);

/**
 * @brief (get) The current RTC year 
 * @return range [2021, 2040]
 */
uint16_t canbus_get_rtc_year(void);

/**
 * @brief (set) The current RTC month 
 * @param value range [1, 12]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_rtc_month(uint8_t value);

/**
 * @brief (get) The current RTC month 
 * @return range [1, 12]
 */
uint8_t canbus_get_rtc_month(void);

/**
 * @brief (set) The current RTC day 
 * @param value range [1, 31]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_rtc_day(uint8_t value);

/**
 * @brief (get) The current RTC day 
 * @return range [1, 31]
 */
uint8_t canbus_get_rtc_day(void);

/**
 * @brief (set) The current RTC hour 
 * @param value range [0, 23]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_rtc_hour(uint8_t value);

/**
 * @brief (get) The current RTC hour 
 * @return range [0, 23]
 */
uint8_t canbus_get_rtc_hour(void);

/**
 * @brief (set) The current RTC minute 
 * @param value range [0, 59]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_rtc_minute(uint8_t value);

/**
 * @brief (get) The current RTC minute 
 * @return range [0, 59]
 */
uint8_t canbus_get_rtc_minute(void);

/**
 * @brief (set) The current RTC second 
 * @param value range [0, 59]
 * @return bool: true on success, false on error (value out of range)
 */
bool canbus_set_rtc_second(uint8_t value);

/**
 * @brief (get) The current RTC second 
 * @return range [0, 59]
 */
uint8_t canbus_get_rtc_second(void);

/**
 * @brief (set) The RTC status 
 * @param value status: 0=ERROR, 1=WARNING, 2=OKAY
 * @return bool: true on success, false on error (value not defined in status)
 */
bool canbus_set_rtc_status(uint8_t value);

/**
 * @brief (get) The RTC status 
 * @return status: 0=ERROR, 1=WARNING, 2=OKAY
 */
uint8_t canbus_get_rtc_status(void);

/**
 * @brief (set) The water pump state 
 * @param value states: 0=OFF, 1=ON
 * @return bool: true on success, false on error (value not defined in states)
 */
bool canbus_set_water_pump_state(uint8_t value);

/**
 * @brief (get) The water pump state 
 * @return states: 0=OFF, 1=ON
 */
uint8_t canbus_get_water_pump_state(void);

/**
 * @brief (set) The water_pump status 
 * @param value status: 0=ERROR, 1=WARNING, 2=OKAY
 * @return bool: true on success, false on error (value not defined in status)
 */
bool canbus_set_water_pump_status(uint8_t value);

/**
 * @brief (get) The water_pump status 
 * @return status: 0=ERROR, 1=WARNING, 2=OKAY
 */
uint8_t canbus_get_water_pump_status(void);

/**
 * @brief (set) The water valve state 
 * @param value states: 0=OFF, 1=ON
 * @return bool: true on success, false on error (value not defined in states)
 */
bool canbus_set_water_valve_state(uint8_t value);

/**
 * @brief (get) The water valve state 
 * @return states: 0=OFF, 1=ON
 */
uint8_t canbus_get_water_valve_state(void);

/**
 * @brief (set) The water_valve status 
 * @param value status: 0=ERROR, 1=WARNING, 2=OKAY
 * @return bool: true on success, false on error (value not defined in status)
 */
bool canbus_set_water_valve_status(uint8_t value);

/**
 * @brief (get) The water_valve status 
 * @return status: 0=ERROR, 1=WARNING, 2=OKAY
 */
uint8_t canbus_get_water_valve_status(void);

/**
 * @brief (set) The fan state 
 * @param value states: 0=OFF, 1=ON
 * @return bool: true on success, false on error (value not defined in states)
 */
bool canbus_set_fans_state(uint8_t value);

/**
 * @brief (get) The fan state 
 * @return states: 0=OFF, 1=ON
 */
uint8_t canbus_get_fans_state(void);

/**
 * @brief (set) The fan status 
 * @param value status: 0=ERROR, 1=WARNING, 2=OKAY
 * @return bool: true on success, false on error (value not defined in status)
 */
bool canbus_set_fans_status(uint8_t value);

/**
 * @brief (get) The fan status 
 * @return status: 0=ERROR, 1=WARNING, 2=OKAY
 */
uint8_t canbus_get_fans_status(void);

#endif//_CANBUS_H_
